@using System.Globalization
@using EventManagmentSystem.Enums
@model EventManagmentSystem.Models.ViewModel.EventViewModel

@{
    ViewData["Title"] = "Event";
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}

<script>
    function validateNumberOfTickets() {
        var availableTickets = @Model.AmountOfTickets;
        var numberOfTickets = parseInt(document.getElementById("numberOfTickets").value);

        if (numberOfTickets > availableTickets) {
            alert("Die Anzahl der angeforderten Tickets darf nicht größer sein als die verfügbare Anzahl von Tickets.");
            return false;
        }
        return true;
    }
    
    function setEventEditable(){
        var editFields = document.querySelectorAll(".form-control");
        for (i=0;i<editFields.length;i++)
            {
                editFields[i].removeAttribute("disabled");
            }
        var button = document.getElementById("submitChanges");
        button.removeAttribute("hidden");
        var buttonChange = document.getElementById("changeEvent");
        buttonChange.setAttribute("hidden","hidden");
        var abortButton = document.getElementById("abortChanges");
        abortButton.removeAttribute("hidden");
    }   
        
    function setEventNotEditable ()
    {
        var editfields = document.querySelectorAll(".form-control");
        for (i=0;i<editfields.length;i++)
            {
                editfields[i].setAttribute("disabled", "disabled");
            }
        var button = document.getElementById("submitChanges");
        button.setAttribute("hidden","hidden");
        var buttonChange = document.getElementById("changeEvent");
                        buttonChange.removeAttribute("hidden");
    }
    function resetChanges()
    {
        location.reload(true);
    }
    
</script>

    <form method="post" asp-controller="Event" asp-action="ChangeEvent">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input asp-for="Title" class="form-control h1 display-4 event-title" value="@Model.Title" disabled="disabled" required="required"/>
        <span asp-validation-for="Title" class="text-danger"></span>
        <hr class="my-4"/>
        <textarea asp-for="Description" class="lead m-2 form-control event-description" disabled="disabled" required="required">@Model.Description</textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
        <hr class="spacingLine-light"/>
        <div class="form-group">
            <label asp-for="Date" class="fw-bold m-2 mb-0 control-label">Datum und Uhrzeit</label>
            <input asp-for="Date" type="datetime-local" class="event-date m-2 form-control" value="@HtmlEncoder.Encode(Model.Date.ToString("yyyy-MM-ddThh:mm"))" min="@DateTime.Now.ToString("yyyy-MM-ddThh:mm")" disabled="disabled" required="required"/>
            <span asp-validation-for="Date" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="Price" class="fw-bold m-2 mb-0">Preis in €</label>
            <input asp-for="Price" class="event-price form-control m-2" type="number" step="0.01" value="@Model.Price.ToString("#0.00", CultureInfo.InvariantCulture)" min="0.01" disabled="disabled" required="required"/>
            <span asp-validation-for="Price" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="AmountOfTickets" class="control-label fw-bold m-2 mb-0">Verfügbare Tickets</label>
            <input asp-for="AmountOfTickets" class="form-control event-tickets m-2" type="number" value="@Model.AmountOfTickets" min="1" disabled="disabled" required="required"/>
            <span asp-validation-for="AmountOfTickets"></span>
        </div>
        <textarea asp-for="EventId" class="d-none">@Model.EventId</textarea>
        <br/>
        <div class="form-group">
            <button type="submit" id="submitChanges" onsubmit="setEventNotEditable()" value="ChangeEvent" class="btn btn-primary" hidden="hidden">Änderungen bestätigen</button>
            <button type="submit" id="abortChanges" onclick="resetChanges()" class="btn btn-danger" hidden="hidden">Bearbeiten abbrechen</button>
        </div>
    </form>

@if (Context.Session.GetString("UserID") != null)
{
    @if (Context.Session.GetString("UserRole").Equals("NormalUser"))
    {
        @if (Model.State == EventStateEnum.ForSale)
        {
            <form asp-controller="Payment" asp-action="Payment" method="get" onsubmit="return validateNumberOfTickets()">
                <!-- Formularfelder für Event-Details und Anzahl der Tickets -->
                <input type="hidden" name="eventId" value="@Model.EventId"/>
                <label for="numberOfTickets" style="font-weight: bold; margin: 8px; margin-bottom: 0px;">Wie viele Tickets?</label>
                <input class="form-control" type="number" id="numberOfTickets" name="numberOfTickets" min="1" style="width: 5%; margin: 8px;" required>
                <hr class="spacingLine-light"/>
                <!--Wenn der user ein Seller ist soll das nicht angezeigt werden-->
                <div class="d-flex justify-content-end">
                    <div class="p-2">
                    <a asp-action="Index" asp-controller="Home" method="Get" class="mx-2">
                        <button type="button" class="btn btn-danger">Abbrechen</button>
                    </a>
                    </div>
                    <div class="p-2">
                        <button type="submit" class="btn btn-success">Tickets buchen</button>
                    </div>
                </div>
            </form>
        }
        @if(Model.State==EventStateEnum.OutOfDate)
        {
            <hr class="spacingLine-light"/>
            <p class="fw-bold m-2 mb-0">Das Event hat schon stattgefunden. Es können keine Tickets mehr gekauft werden.</p>
        }
        @if (Model.State == EventStateEnum.SoldOut)
        {
            <hr class="spacingLine-light"/>
            <p class="fw-bold m-2 mb-0">Das Event ist ausverkauft. Es können keine Tickets mehr gekauft werden.</p>
        }
    }
    else
    {
        <div class="d-flex justify-content-between">

            <div class="p-2">
                <p>Als Verkäufer können Sie keine Tickets für Ihre eigenen Veranstaltungen kaufen.</p>
            </div>
            <div class="p-2">
                @if (Model.State != EventStateEnum.OutOfDate)
                {
                    <button id="changeEvent" onclick="setEventEditable()" class="btn btn-primary m-2 mb-0">Event bearbeiten</button>   
                }
                <form method="post" action="@Url.Action("DeleteEvent", "Event", new { eventId = Model.EventId })"
                      onsubmit="return confirm('Event endgültig löschen?');">
                    <button type="submit" class="btn btn-danger m-2 mb-0">Event löschen</button>
                </form>
            </div>
        </div>
    }
}

